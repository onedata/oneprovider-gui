import { expect } from 'chai';
import { describe, it } from 'mocha';
import isNotFoundError from 'oneprovider-gui/utils/is-not-found-error';

describe('Unit | Utility | is not found error', function () {
  it('returns false if error is nullish', function () {
    const error = null;

    const result = isNotFoundError(error);

    expect(result).to.be.false;
  });

  it('returns true if error does not indicate not found', function () {
    const error = {
      id: 'forbidden',
    };

    const result = isNotFoundError(error);

    expect(result).to.be.false;
  });

  it('returns true if error is of type notFound', function () {
    const error = {
      id: 'notFound',
    };

    const result = isNotFoundError(error);

    expect(result).to.be.true;
  });

  it('returns true if error is generated by some Ember bug', function () {
    const error = {
      message: 'Attempted to handle event loadingData while in state root.deleted.saved',
    };

    const result = isNotFoundError(error);

    expect(result).to.be.true;
  });

  it('returns true if error is POSIX not found error', function () {
    const error = {
      id: 'posix',
      details: {
        errno: 'enoent',
      },
    };

    const result = isNotFoundError(error);

    expect(result).to.be.true;
  });
});
