import { expect } from 'chai';
import { describe, it } from 'mocha';
import HashGenerator from 'oneprovider-gui/utils/hash-generator';
import sinon from 'sinon';

describe('Unit | Utility | hash generator', function () {
  it('generates CRC-16 (KERMIT algorithm) hexadecimal hash from provided string', function () {
    const subject = new HashGenerator();

    const result = subject.getHash('hello world');

    expect(result).to.equal('a1d2');
  });

  it('generates the same hashes for the same values', function () {
    const subject = new HashGenerator();

    const result1 = subject.getHash('hello world');
    const result2 = subject.getHash('hello world');

    expect(result1).to.equal('a1d2');
    expect(result2).to.equal(result1);
  });

  it('returns different hashes if hashes generated by algorithm are are the same for different values',
    function () {
      const subject = new HashGenerator();

      // these two strings should generate the same hash using CRC-16 KERMIT
      // you can check it with: https://crccalc.com/
      const hash1 = subject.getHash('this is a test of crc');
      const hash2 = subject.getHash('uhis!is a tdst og crc');

      expect(hash1).to.equal('2bf6');
      expect(hash2).to.not.equal(hash1);
      expect(hash2).to.be.not.empty;
    }
  );

  it('does not invoke generating method if value has been already used', function () {
    const subject = new HashGenerator();
    const generateSpy = sinon.spy(subject, 'generate');

    subject.getHash('hello world');
    subject.getHash('hello world');

    expect(generateSpy).to.have.been.calledOnce;
  });

  it('has generation limit if hashes collide', function () {
    const subject = new HashGenerator();
    subject.collisionsLimit = 5;
    subject.cache = {
      a: '0001',
      b: '0002',
      c: '0003',
      d: '0004',
      e: '0005',
      f: '0006',
    };
    const generate = sinon.stub(subject, 'generate');
    generate
      .withArgs('initial').returns('0001')
      .withArgs('0001').returns('0002')
      .withArgs('0002').returns('0003')
      .withArgs('0003').returns('0004')
      .withArgs('0004').returns('0005')
      .withArgs('0005').returns('0006')
      .withArgs('0006').throws('too many generate invocations')
      .throws('generate invocation with unexpected value');

    const result = subject.getHash('initial');

    expect(result).to.equal('0005');
  });
});
