/**
 * A base class for logic and co-related data for file-browser.
 * It acts as a strategy for `file-browser` component, while the component serves
 * state (see region file-browser state) and API (region file-browser API).
 *
 * Extend this class to implement specific browsers like filesystem-browser.
 *
 * @module utils/base-browser-model
 * @author Jakub Liput
 * @copyright (C) 2021 ACK CYFRONET AGH
 * @license This software is released under the MIT license cited in 'LICENSE.txt'.
 */

import EmberObject, { getProperties, computed, observer, get } from '@ember/object';
import { reads } from '@ember/object/computed';
import { inject as service } from '@ember/service';
import { dasherize } from '@ember/string';
import notImplementedIgnore from 'onedata-gui-common/utils/not-implemented-ignore';
import OwnerInjector from 'onedata-gui-common/mixins/owner-injector';
import I18n from 'onedata-gui-common/mixins/components/i18n';
import animateCss from 'onedata-gui-common/utils/animate-css';
import {
  actionContext,
} from 'oneprovider-gui/components/file-browser';

export default EmberObject.extend(OwnerInjector, I18n, {
  i18n: service(),

  /**
   * @override
   */
  i18nPrefix: 'utils.baseBrowserModel',

  //#region API for file-browser component

  /**
   * @virtual
   * @type {Components.FileBrowser} browserInstance
   */
  browserInstance: undefined,

  /**
   * @virtual
   * @type {Array<String>}
   */
  buttonNames: Object.freeze([]),

  /**
   * @virtual
   * @type {Function}
   */
  onInsertElement: notImplementedIgnore,

  /**
   * @virtual
   * @type {Function<(fileIds: Array<String>) => Promise>}
   */
  onOpenFile: notImplementedIgnore,

  /**
   * Return true for item that should be presented as disabled (muted, non-selectable).
   * @virtual optional
   * @type {(item: Object) => boolean}
   */
  isItemDisabled: notImplementedIgnore,

  /**
   * @virtual
   * @type {String}
   */
  rowComponentName: '',

  /**
   * @virtual
   * @type {String}
   */
  statusBarComponentName: '',

  /**
   * @virtual
   * @type {String}
   */
  headStatusBarComponentName: '',

  /**
   * @virtual
   * @type {String}
   */
  mobileSecondaryInfoComponentName: '',

  /**
   * @virtual
   * @type {String}
   */
  columnsComponentName: '',

  /**
   * @virtual
   * @type {String}
   */
  headRowComponentName: '',

  /**
   * @virtual
   * @type {String}
   */
  dirLoadErrorComponentName: '',

  /**
   * @virtual
   * @type {String}
   */
  emptyDirComponentName: '',

  /**
   * @virtual optional
   * @type {String}
   */
  browserClass: '',

  /**
   * Custom text for "current directory" for current dir menu.
   * @virtual optional
   * @type {SafeString}
   */
  currentDirTranslation: '',

  /**
   * If true, files table will not jump to changed `itemsForJump` if these items are
   * already selected.
   * @virtual optional
   * @type {Boolean}
   */
  disableReJumps: false,

  /**
   * @virtual optional
   * @type {Boolean}
   * When true, allow to select only single item on list.
   */
  singleSelect: false,

  /**
   * @type {String}
   */
  rootIcon: 'space',

  getCurrentDirMenuButtons(availableActions) {
    return availableActions;
  },

  /**
   * All button objects. Order is significant.
   * Computed property is dynamically generated by `generateAllButtonsArray` observer.
   * @type {ComputedProperty<Array<Object>>}
   */
  allButtonsArray: undefined,

  /**
   * Maps button id => button object.
   * @type {Object}
   */
  allButtonsHash: computed('allButtonsArray.[]', function allButtonsHash() {
    const allButtonsArray = this.get('allButtonsArray');
    return allButtonsArray.reduce((hash, button) => {
      hash[get(button, 'id')] = button;
      return hash;
    }, {});
  }),

  //#endregion

  //#region file-browser state

  dir: reads('browserInstance.dir'),
  selectedItems: reads('browserInstance.selectedItems'),
  selectedItemsForJumpProxy: reads('browserInstance.selectedItemsForJumpProxy'),
  selectionContext: reads('browserInstance.selectionContext'),
  element: reads('browserInstance.element'),
  spacePrivileges: reads('browserInstance.spacePrivileges'),
  spaceId: reads('browserInstance.spaceId'),
  previewMode: reads('browserInstance.previewMode'),
  isSpaceOwned: reads('browserInstance.isSpaceOwned'),
  // TODO: VFS-7643 refactor generic-browser to use names other than "file" for leaves
  fileClipboardMode: reads('browserInstance.fileClipboardMode'),
  fileClipboardFiles: reads('browserInstance.fileClipboardFiles'),

  //#endregion

  //#region file-browser API

  fbTableApi: reads('browserInstance.fbTableApi'),

  // TODO: VFS-7643 refactor generic-browser to use names other than "file" for leaves
  /**
   * You can push and remove file IDs to alter row icons loading state
   * @type {Ember.Array<String>}
   */
  loadingIconFileIds: reads('browserInstance.loadingIconFileIds'),

  //#endregion

  /**
   * @type {ComputedProperty<Boolean>}
   */
  areMultipleSelected: computed('selectionContext', function areMultipleSelected() {
    const selectionContext = this.get('selectionContext');
    return [
      actionContext.multiFile,
      actionContext.multiDir,
      actionContext.multiMixed,
      actionContext.multiFilePreview,
      actionContext.mutliDirPreview,
      actionContext.multiMixedPreview,
    ].includes(selectionContext);
  }),

  btnRefresh: computed(function btnRefresh() {
    return this.createFileAction({
      id: 'refresh',
      icon: 'refresh',
      action: () => {
        return this.refresh();
      },
      showIn: [
        actionContext.inDir,
        actionContext.inDirPreview,
        actionContext.currentDir,
        actionContext.currentDirPreview,
        actionContext.spaceRootDir,
        actionContext.spaceRootDirPreview,
      ],
    });
  }),

  generateAllButtonsArray: observer(
    'buttonNames.[]',
    function generateAllButtonsArray() {
      const buttonNames = this.get('buttonNames');
      this.allButtonsArray = computed(...buttonNames, function allButtonsArray() {
        return buttonNames.map(btnName => this.get(btnName));
      });
    }
  ),

  init() {
    this._super(...arguments);
    this.generateAllButtonsArray();
  },

  /**
   * @param {Object} dir file-like object
   * @param {Function} updateBrowserDir A standard procedure of file
   *   browser that must be invoked to really change the dir in browser.
   *   If you want to stop opening dir in real browser, do not invoke this callback.
   *   The first argument if dir to be effectively opened - if you invoke the function
   *   without arguments it will open `dir` by default.
   */
  async onChangeDir(dir, updateBrowserDir) {
    return await updateBrowserDir(dir);
  },

  refresh() {
    const {
      globalNotify,
      fbTableApi,
      element,
    } = this.getProperties('globalNotify', 'fbTableApi', 'element');
    animateCss(
      element.querySelector('.fb-toolbar-button.file-action-refresh'),
      'pulse-mint'
    );
    return fbTableApi.refresh()
      .catch(error => {
        globalNotify.backendError(this.t('refreshing'), error);
        throw error;
      });
  },

  /**
   * Create button or popover menu item for controlling files.
   * @param {object} actionProperties properties of action button:
   *  - id: string
   *  - action: optional function
   *  - icon: optional string, if not provided will be generated
   *  - title: string
   *  - showIn: array of strings from arrayContext
   *  - class: string, classes added to element
   * @returns {EmberObject}
   */
  createFileAction(actionProperties) {
    const {
      id,
      title,
      icon,
      showIn,
      action,
      disabled,
      class: elementClass,
    } = getProperties(
      actionProperties,
      'id',
      'title',
      'icon',
      'showIn',
      'action',
      'disabled',
      'class'
    );
    return Object.assign({}, actionProperties, {
      icon: icon || `browser-${dasherize(id)}`,
      title: title || this.t(`fileActions.${id}`),
      showIn: showIn || [],
      disabled: disabled === undefined ? false : disabled,
      action: (files, ...args) => {
        return action(files || this.get('selectedItems'), ...args);
      },
      class: `file-action-${id} ${elementClass || ''}`,
    });
  },

});
