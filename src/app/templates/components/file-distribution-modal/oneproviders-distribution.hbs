{{#loading-container
  isLoading=isDistributionLoading
  errorReason=distributionErrorReason}}
  {{#if isMigrationDestinationSelectorVisible}}
    {{file-distribution-modal/destination-oneprovider-selector
      files=(map-by "file" fileDistributionData)
      oneproviders=oneproviders
      evictingOneproviders=evictingOneproviders
      sourceOneprovider=newMigrationSourceOneprovider
      providersWithReadonlySupport=space.providersWithReadonlySupport
      onMigrate=(action "tryStartMigration")
      onCancel=(action "cancelNewMigration")}}
  {{else if isStartSubsequentTransferConfirmationVisible}}
    {{file-distribution-modal/confirm-subsequent-transfer
      transferType=startSubsequentTransferType
      oneprovider=(if (eq startSubsequentTransferType "replication") startSubsequentTransferData.destinationOneprovider startSubsequentTransferData.sourceOneprovider)
      onConfirm=(action "startSubsequentTransfer")
      onCancel=(action "cancelSubsequentTransfer")}}
  {{/if}}
  <div class="{{if (or isMigrationDestinationSelectorVisible isStartSubsequentTransferConfirmationVisible) "hidden"}}">
    <ul>
      {{#each-in storageList as |storageId oneprovider|}}
        {{file-distribution-modal/oneproviders-distribution-item
          class=(concat "oneprovider-" oneprovider.entityId)
          oneprovider=oneprovider
          hasReadonlySupport=(contains
            oneprovider.entityId
            space.providersWithReadonlySupport
          )
          spaceHasSingleOneprovider=(eq oneproviders.length 1)
          fileDistributionData=fileDistributionData
          replicationForbidden=(not space.privileges.scheduleReplication)
          evictionForbidden=(not space.privileges.scheduleEviction)
          onReplicate=(action "tryStartReplication" oneprovider)
          onMigrate=(action "selectMigrationDestination" oneprovider)
          onEvict=(action "tryStartEviction" oneprovider)
          storageId=storageId
          space=space
        }}
      {{/each-in}}
      <div class="transfers-counter-info">
        {{#unless batchMode}}
          {{#promise-proxy-container
            proxy=fileDistributionData.firstObject.transfersProxy
            isLoading=(and fileDistributionData.firstObject.transfersProxy.isPending (not fileDistributionData.firstObject.transfersProxy.content))
            alwaysRender=true
            customErrorMessage=(tt this "cannotLoadTransfers")
            absoluteCentered=false
            sizeClass="xxs"
          }}
            <div>
              {{#if fileDistributionData.firstObject.transfersProxy.content}}
                {{#if activeTransfersExist}}
                  {{tt this "currentlyTransferredText" elementType=(tt this fileDistributionData.firstObject.fileType)}}
                  &ndash;
                  <a class="link-to-transfers link-to-transfers-ongoing" href={{navigateTransfersHref}} target={{navigateTransfersTarget}}>{{tt this "currentlyTransferredLink"}}</a>.
                {{else if endedTransfersCount}}
                  {{tt this "endedTransfersText"
                    elementType=(tt this fileDistributionData.firstObject.fileType)
                    count=endedTransfersCount
                    countUnit=(tt this (if (gt endedTransfersCount 1) "times" "time"))
                  }}
                  {{#if endedTransfersOverflow}}
                    {{tt this "orMore"}}
                  {{/if}}
                  &ndash;
                  <a class="link-to-transfers link-to-transfers-ended" href={{navigateTransfersHref}} target={{navigateTransfersTarget}}>{{tt this "endedTransfersLink"}}</a>.
                {{else}}
                  {{tt this "noTransfersText" elementType=(tt this fileDistributionData.firstObject.fileType)}}
                {{/if}}
              {{/if}}
            </div>
          {{/promise-proxy-container}}
        {{/unless}}
        <div class="main-legend">
          {{#if (and hasSingleFile hasOnlyFiles)}}
            <div class="legend"><div class="block-legend"></div>Block distribution</div>
          {{else}}
            <div class="legend"><div class="replication-legend"></div>Replication ratio</div>
          {{/if}}
        </div>
      </div>
    </ul>
  </div>
{{/loading-container}}
{{yield}}
